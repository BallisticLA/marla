classdef TestOverLstsqSolver
    
    properties
        SEEDS = [1, 4, 15, 31, 42]
    end
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %
    %   Instance methods
    %
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    methods
        function obj = TestEVDecomposer(psd)
            obj.PSD = psd;
        end

        function [] = run_batch(obj, eth, revd, target_rank,...
                target_tol, test_tol, over)
            % obj: TestEVDecomposer
            % eth: EigTestHelper
            % revd: (partial) function handle for evd1 or evd2
            for idx = 1:length(obj.SEEDS)
                seed = obj.SEEDS(idx);

                % Call the algorithm
                [V_approx, lamb_approx] = revd(eth.A,...
                    target_rank, target_tol, over, seed);
                eth.V_approx = V_approx;
                eth.lamb_approx = lamb_approx;
                
                % Run tests
                eth.test_conformable();
                eth.test_eigvals(obj.PSD);
                eth.test_valid_onb(test_tol);
                if ~isnan(target_tol)
                    reltol = obj.INFLATE_TEST_TOL * target_tol;
                    eth.test_fro_error(reltol);
                end
            end
        end

        function[] = run_inconsistent(obj, ath, spo, alg_tol, iter_lim,...
                         test_tol)
            for idx = 1:length(obj.SEEDS)
                seed = obj.SEEDS(idx);

                % Call the algorithms
                [x_approx, ~] = spo(ath.A,...
                    target_rank, target_tol, over, seed);
                ath.V_approx = V_approx;
                ath.lamb_approx = lamb_approx;

                % Run tests
                ath.test_residual_proj(self, test_tol);
                ath.test_x_angle(self, test_tol);
                ath.test_x_norm(self, test_tol);
            end
        end
    end

end